#!/usr/bin/env python

import rospy,threading
from geometry_msgs.msg import Vector3
from dg_turtlesim.srv import turtlesim_target

TOPIC = "turtle1/target"
SERVICE = "turtle1/set_target_position"
RATE = 50

POSITION = [0,0,0]
LOCK = threading.Lock()


def _set_target_position(req):

    global LOCK,POSITION
    
    with LOCK:
        POSITION[0] = req.position.x
        POSITION[1] = req.position.y
        POSITION[2] = req.position.z

    return []


def _run():

    global TOPIC,RATE,POSITION,LOCK,SERVICE

    rospy.init_node('turtlesim_target_position')

    rospy.Service( SERVICE,
                   turtlesim_target,
                   _set_target_position )
    
    publisher = rospy.Publisher( TOPIC,
                                 Vector3,
                                 queue_size=10 )
    rate = rospy.Rate(RATE)

    message = Vector3()
    
    while not rospy.is_shutdown():

        with LOCK:
            message.x,message.y,message.z = POSITION
        
        publisher.publish(message)
        rate.sleep()
    


if __name__ == '__main__':

    try :
        _run()
    except rospy.ROSInterruptException:
        pass
